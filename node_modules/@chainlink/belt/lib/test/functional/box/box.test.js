"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const shelljs_1 = require("shelljs");
const box_1 = tslib_1.__importDefault(require("../../../src/commands/box"));
const truffle_box_1 = require("../../../src/services/truffle-box");
const TEST_PATH = 'test/functional/box/';
const TEST_FS_PATH = path_1.join(TEST_PATH, 'testfs');
const FIXTURES_PATH = path_1.join(TEST_PATH, 'fixtures');
describe('truffle box tests', () => {
    function assertSnapshotOutput() {
        const packageJson = truffle_box_1.getPackageJson(TEST_FS_PATH);
        const truffleConfig = truffle_box_1.getTruffleConfig(TEST_FS_PATH);
        const solFiles = truffle_box_1.getSolidityFiles(TEST_FS_PATH);
        const jsFiles = truffle_box_1.getJavascriptFiles(TEST_FS_PATH);
        const allFiles = solFiles
            .concat(jsFiles, [truffleConfig, packageJson])
            .sort();
        expect(shelljs_1.cat(allFiles).stdout).toMatchSnapshot();
    }
    beforeEach(() => {
        shelljs_1.rm('-r', TEST_FS_PATH);
        shelljs_1.cp('-r', FIXTURES_PATH, TEST_FS_PATH);
    });
    it('should properly convert to v0.4', async () => {
        await box_1.default.run(['-s=0.4', TEST_FS_PATH]);
        assertSnapshotOutput();
    });
    it('should properly convert to v0.5', async () => {
        await box_1.default.run(['-s=0.5', TEST_FS_PATH]);
        assertSnapshotOutput();
    });
    it('should throw when trying to select v0.6 (non-public)', async () => {
        expect(box_1.default.run(['-s=0.6'])).rejects.toBeInstanceOf(Error);
    });
    it('should throw when passed invalid version', async () => {
        expect(box_1.default.run(['-s=0.99'])).rejects.toBeInstanceOf(Error);
    });
    it('should output nothing on a dry run', async () => {
        const mockFn = () => { };
        const mockLog = jest.spyOn(console, 'log').mockImplementation(mockFn);
        mockLog.mockName('mockLog');
        const mockErr = jest.spyOn(console, 'error').mockImplementation(mockFn);
        mockErr.mockName('mockErr');
        await box_1.default.run(['-d', '-s=0.5', TEST_FS_PATH]);
        expect(mockErr).not.toHaveBeenCalled();
        expect(mockLog).toHaveBeenCalled();
        mockLog.mockRestore();
        mockErr.mockRestore();
        assertSnapshotOutput();
    });
    it.each([['0.5'], ['v0.5'], ['0.5.0']])('should handle different version type inputs like %s', async (testVersion) => {
        expect(async () => await box_1.default.run([`-s=${testVersion}`, TEST_FS_PATH])).not.toThrow();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L2Z1bmN0aW9uYWwvYm94L2JveC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtCQUEyQjtBQUMzQixxQ0FBcUM7QUFDckMsNEVBQTJDO0FBQzNDLG1FQUswQztBQUUxQyxNQUFNLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQTtBQUN4QyxNQUFNLFlBQVksR0FBRyxXQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0FBQzlDLE1BQU0sYUFBYSxHQUFHLFdBQUksQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUE7QUFFakQsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxTQUFTLG9CQUFvQjtRQUMzQixNQUFNLFdBQVcsR0FBRyw0QkFBYyxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ2hELE1BQU0sYUFBYSxHQUFHLDhCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3BELE1BQU0sUUFBUSxHQUFHLDhCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQy9DLE1BQU0sT0FBTyxHQUFHLGdDQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ2hELE1BQU0sUUFBUSxHQUFHLFFBQVE7YUFDdEIsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQzthQUM3QyxJQUFJLEVBQUUsQ0FBQTtRQUVULE1BQU0sQ0FBQyxhQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUE7SUFDaEQsQ0FBQztJQUVELFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxZQUFFLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFBO1FBQ3RCLFlBQUUsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFBO0lBQ3ZDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLGlDQUFpQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQy9DLE1BQU0sYUFBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFBO1FBQ3ZDLG9CQUFvQixFQUFFLENBQUE7SUFDeEIsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0MsTUFBTSxhQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUE7UUFDdkMsb0JBQW9CLEVBQUUsQ0FBQTtJQUN4QixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxzREFBc0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNwRSxNQUFNLENBQUMsYUFBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzNELENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLDBDQUEwQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3hELE1BQU0sQ0FBQyxhQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUQsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbEQsTUFBTSxNQUFNLEdBQVEsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFBO1FBRTVCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3JFLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFM0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDdkUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUUzQixNQUFNLGFBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUE7UUFDN0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO1FBQ3RDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO1FBQ2xDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUNyQixPQUFPLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDckIsb0JBQW9CLEVBQUUsQ0FBQTtJQUN4QixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQ3JDLHFEQUFxRCxFQUNyRCxLQUFLLEVBQUMsV0FBVyxFQUFDLEVBQUU7UUFDbEIsTUFBTSxDQUNKLEtBQUssSUFBSSxFQUFFLENBQUMsTUFBTSxhQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxXQUFXLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUMvRCxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNqQixDQUFDLENBQ0YsQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBjYXQsIGNwLCBybSB9IGZyb20gJ3NoZWxsanMnXG5pbXBvcnQgQm94IGZyb20gJy4uLy4uLy4uL3NyYy9jb21tYW5kcy9ib3gnXG5pbXBvcnQge1xuICBnZXRKYXZhc2NyaXB0RmlsZXMsXG4gIGdldFBhY2thZ2VKc29uLFxuICBnZXRTb2xpZGl0eUZpbGVzLFxuICBnZXRUcnVmZmxlQ29uZmlnLFxufSBmcm9tICcuLi8uLi8uLi9zcmMvc2VydmljZXMvdHJ1ZmZsZS1ib3gnXG5cbmNvbnN0IFRFU1RfUEFUSCA9ICd0ZXN0L2Z1bmN0aW9uYWwvYm94LydcbmNvbnN0IFRFU1RfRlNfUEFUSCA9IGpvaW4oVEVTVF9QQVRILCAndGVzdGZzJylcbmNvbnN0IEZJWFRVUkVTX1BBVEggPSBqb2luKFRFU1RfUEFUSCwgJ2ZpeHR1cmVzJylcblxuZGVzY3JpYmUoJ3RydWZmbGUgYm94IHRlc3RzJywgKCkgPT4ge1xuICBmdW5jdGlvbiBhc3NlcnRTbmFwc2hvdE91dHB1dCgpIHtcbiAgICBjb25zdCBwYWNrYWdlSnNvbiA9IGdldFBhY2thZ2VKc29uKFRFU1RfRlNfUEFUSClcbiAgICBjb25zdCB0cnVmZmxlQ29uZmlnID0gZ2V0VHJ1ZmZsZUNvbmZpZyhURVNUX0ZTX1BBVEgpXG4gICAgY29uc3Qgc29sRmlsZXMgPSBnZXRTb2xpZGl0eUZpbGVzKFRFU1RfRlNfUEFUSClcbiAgICBjb25zdCBqc0ZpbGVzID0gZ2V0SmF2YXNjcmlwdEZpbGVzKFRFU1RfRlNfUEFUSClcbiAgICBjb25zdCBhbGxGaWxlcyA9IHNvbEZpbGVzXG4gICAgICAuY29uY2F0KGpzRmlsZXMsIFt0cnVmZmxlQ29uZmlnLCBwYWNrYWdlSnNvbl0pXG4gICAgICAuc29ydCgpXG5cbiAgICBleHBlY3QoY2F0KGFsbEZpbGVzKS5zdGRvdXQpLnRvTWF0Y2hTbmFwc2hvdCgpXG4gIH1cblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBybSgnLXInLCBURVNUX0ZTX1BBVEgpXG4gICAgY3AoJy1yJywgRklYVFVSRVNfUEFUSCwgVEVTVF9GU19QQVRIKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcHJvcGVybHkgY29udmVydCB0byB2MC40JywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IEJveC5ydW4oWyctcz0wLjQnLCBURVNUX0ZTX1BBVEhdKVxuICAgIGFzc2VydFNuYXBzaG90T3V0cHV0KClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHByb3Blcmx5IGNvbnZlcnQgdG8gdjAuNScsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBCb3gucnVuKFsnLXM9MC41JywgVEVTVF9GU19QQVRIXSlcbiAgICBhc3NlcnRTbmFwc2hvdE91dHB1dCgpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCB0aHJvdyB3aGVuIHRyeWluZyB0byBzZWxlY3QgdjAuNiAobm9uLXB1YmxpYyknLCBhc3luYyAoKSA9PiB7XG4gICAgZXhwZWN0KEJveC5ydW4oWyctcz0wLjYnXSkpLnJlamVjdHMudG9CZUluc3RhbmNlT2YoRXJyb3IpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCB0aHJvdyB3aGVuIHBhc3NlZCBpbnZhbGlkIHZlcnNpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgZXhwZWN0KEJveC5ydW4oWyctcz0wLjk5J10pKS5yZWplY3RzLnRvQmVJbnN0YW5jZU9mKEVycm9yKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgb3V0cHV0IG5vdGhpbmcgb24gYSBkcnkgcnVuJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tGbjogYW55ID0gKCkgPT4ge31cblxuICAgIGNvbnN0IG1vY2tMb2cgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdsb2cnKS5tb2NrSW1wbGVtZW50YXRpb24obW9ja0ZuKVxuICAgIG1vY2tMb2cubW9ja05hbWUoJ21vY2tMb2cnKVxuXG4gICAgY29uc3QgbW9ja0VyciA9IGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKG1vY2tGbilcbiAgICBtb2NrRXJyLm1vY2tOYW1lKCdtb2NrRXJyJylcblxuICAgIGF3YWl0IEJveC5ydW4oWyctZCcsICctcz0wLjUnLCBURVNUX0ZTX1BBVEhdKVxuICAgIGV4cGVjdChtb2NrRXJyKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgZXhwZWN0KG1vY2tMb2cpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIG1vY2tMb2cubW9ja1Jlc3RvcmUoKVxuICAgIG1vY2tFcnIubW9ja1Jlc3RvcmUoKVxuICAgIGFzc2VydFNuYXBzaG90T3V0cHV0KClcbiAgfSlcblxuICBpdC5lYWNoKFtbJzAuNSddLCBbJ3YwLjUnXSwgWycwLjUuMCddXSkoXG4gICAgJ3Nob3VsZCBoYW5kbGUgZGlmZmVyZW50IHZlcnNpb24gdHlwZSBpbnB1dHMgbGlrZSAlcycsXG4gICAgYXN5bmMgdGVzdFZlcnNpb24gPT4ge1xuICAgICAgZXhwZWN0KFxuICAgICAgICBhc3luYyAoKSA9PiBhd2FpdCBCb3gucnVuKFtgLXM9JHt0ZXN0VmVyc2lvbn1gLCBURVNUX0ZTX1BBVEhdKSxcbiAgICAgICkubm90LnRvVGhyb3coKVxuICAgIH0sXG4gIClcbn0pXG4iXX0=