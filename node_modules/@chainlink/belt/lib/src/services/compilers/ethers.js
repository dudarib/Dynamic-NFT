"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const ts_generator_1 = require("ts-generator");
const TypeChain_1 = require("typechain/dist/TypeChain");
const utils_1 = require("../utils");
/**
 * Generate ethers.js contract abstractions for all of the solidity versions under a specified contract
 * directory.
 *
 * @param conf The application configuration, e.g. where to read artifacts, where to output, etc..
 */
async function compileAll(conf) {
    const cwd = process.cwd();
    return Promise.all(utils_1.getArtifactDirs(conf).map(async ({ dir }) => {
        const c = compiler(conf, cwd, dir);
        await ts_generator_1.tsGenerator({ cwd, loggingLvl: 'verbose' }, c);
    }));
}
exports.compileAll = compileAll;
/**
 * Create a typechain compiler instance that reads in a subdirectory of artifacts e.g. (abi/v0.4, abi/v0.5.. etc)
 * and outputs ethers contract abstractions under the same version prefix, (ethers/v0.4, ethers/v0.4.. etc)
 *
 * @param config The application level config for compilation
 * @param cwd The current working directory during this programs execution
 * @param subDir The subdirectory to use as a namespace when reading artifacts and outputting
 * contract abstractions
 */
function compiler({ artifactsDir, contractAbstractionDir }, cwd, subDir) {
    return new TypeChain_1.TypeChain({
        cwd,
        rawConfig: {
            files: path_1.join(artifactsDir, subDir, '**', '*.json'),
            outDir: path_1.join(contractAbstractionDir, 'ethers', subDir),
            target: 'ethers',
        },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2NvbXBpbGVycy9ldGhlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBMkI7QUFDM0IsK0NBQTBDO0FBQzFDLHdEQUFvRDtBQUVwRCxvQ0FBMEM7QUFFMUM7Ozs7O0dBS0c7QUFDSSxLQUFLLFVBQVUsVUFBVSxDQUFDLElBQWdCO0lBQy9DLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUV6QixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQ2hCLHVCQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUU7UUFDMUMsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDbEMsTUFBTSwwQkFBVyxDQUFDLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUN0RCxDQUFDLENBQUMsQ0FDSCxDQUFBO0FBQ0gsQ0FBQztBQVRELGdDQVNDO0FBRUQ7Ozs7Ozs7O0dBUUc7QUFDSCxTQUFTLFFBQVEsQ0FDZixFQUFFLFlBQVksRUFBRSxzQkFBc0IsRUFBYyxFQUNwRCxHQUFXLEVBQ1gsTUFBYztJQUVkLE9BQU8sSUFBSSxxQkFBUyxDQUFDO1FBQ25CLEdBQUc7UUFDSCxTQUFTLEVBQUU7WUFDVCxLQUFLLEVBQUUsV0FBSSxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQztZQUNqRCxNQUFNLEVBQUUsV0FBSSxDQUFDLHNCQUFzQixFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUM7WUFDdEQsTUFBTSxFQUFFLFFBQVE7U0FDakI7S0FDRixDQUFDLENBQUE7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgeyB0c0dlbmVyYXRvciB9IGZyb20gJ3RzLWdlbmVyYXRvcidcbmltcG9ydCB7IFR5cGVDaGFpbiB9IGZyb20gJ3R5cGVjaGFpbi9kaXN0L1R5cGVDaGFpbidcbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICcuLi9jb25maWcnXG5pbXBvcnQgeyBnZXRBcnRpZmFjdERpcnMgfSBmcm9tICcuLi91dGlscydcblxuLyoqXG4gKiBHZW5lcmF0ZSBldGhlcnMuanMgY29udHJhY3QgYWJzdHJhY3Rpb25zIGZvciBhbGwgb2YgdGhlIHNvbGlkaXR5IHZlcnNpb25zIHVuZGVyIGEgc3BlY2lmaWVkIGNvbnRyYWN0XG4gKiBkaXJlY3RvcnkuXG4gKlxuICogQHBhcmFtIGNvbmYgVGhlIGFwcGxpY2F0aW9uIGNvbmZpZ3VyYXRpb24sIGUuZy4gd2hlcmUgdG8gcmVhZCBhcnRpZmFjdHMsIHdoZXJlIHRvIG91dHB1dCwgZXRjLi5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbXBpbGVBbGwoY29uZjogY29uZmlnLkFwcCkge1xuICBjb25zdCBjd2QgPSBwcm9jZXNzLmN3ZCgpXG5cbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgIGdldEFydGlmYWN0RGlycyhjb25mKS5tYXAoYXN5bmMgKHsgZGlyIH0pID0+IHtcbiAgICAgIGNvbnN0IGMgPSBjb21waWxlcihjb25mLCBjd2QsIGRpcilcbiAgICAgIGF3YWl0IHRzR2VuZXJhdG9yKHsgY3dkLCBsb2dnaW5nTHZsOiAndmVyYm9zZScgfSwgYylcbiAgICB9KSxcbiAgKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHR5cGVjaGFpbiBjb21waWxlciBpbnN0YW5jZSB0aGF0IHJlYWRzIGluIGEgc3ViZGlyZWN0b3J5IG9mIGFydGlmYWN0cyBlLmcuIChhYmkvdjAuNCwgYWJpL3YwLjUuLiBldGMpXG4gKiBhbmQgb3V0cHV0cyBldGhlcnMgY29udHJhY3QgYWJzdHJhY3Rpb25zIHVuZGVyIHRoZSBzYW1lIHZlcnNpb24gcHJlZml4LCAoZXRoZXJzL3YwLjQsIGV0aGVycy92MC40Li4gZXRjKVxuICpcbiAqIEBwYXJhbSBjb25maWcgVGhlIGFwcGxpY2F0aW9uIGxldmVsIGNvbmZpZyBmb3IgY29tcGlsYXRpb25cbiAqIEBwYXJhbSBjd2QgVGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgZHVyaW5nIHRoaXMgcHJvZ3JhbXMgZXhlY3V0aW9uXG4gKiBAcGFyYW0gc3ViRGlyIFRoZSBzdWJkaXJlY3RvcnkgdG8gdXNlIGFzIGEgbmFtZXNwYWNlIHdoZW4gcmVhZGluZyBhcnRpZmFjdHMgYW5kIG91dHB1dHRpbmdcbiAqIGNvbnRyYWN0IGFic3RyYWN0aW9uc1xuICovXG5mdW5jdGlvbiBjb21waWxlcihcbiAgeyBhcnRpZmFjdHNEaXIsIGNvbnRyYWN0QWJzdHJhY3Rpb25EaXIgfTogY29uZmlnLkFwcCxcbiAgY3dkOiBzdHJpbmcsXG4gIHN1YkRpcjogc3RyaW5nLFxuKTogVHlwZUNoYWluIHtcbiAgcmV0dXJuIG5ldyBUeXBlQ2hhaW4oe1xuICAgIGN3ZCxcbiAgICByYXdDb25maWc6IHtcbiAgICAgIGZpbGVzOiBqb2luKGFydGlmYWN0c0Rpciwgc3ViRGlyLCAnKionLCAnKi5qc29uJyksXG4gICAgICBvdXREaXI6IGpvaW4oY29udHJhY3RBYnN0cmFjdGlvbkRpciwgJ2V0aGVycycsIHN1YkRpciksXG4gICAgICB0YXJnZXQ6ICdldGhlcnMnLFxuICAgIH0sXG4gIH0pXG59XG4iXX0=