"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const shelljs_1 = require("shelljs");
const utils_1 = require("../utils");
/**
 * Generate @truffle/contract abstractions for all of the solidity versions under a specified contract
 * directory.
 *
 * @param conf The application configuration, e.g. where to read artifacts, where to output, etc..
 */
async function compileAll(conf) {
    utils_1.getArtifactDirs(conf).forEach(({ dir }) => {
        getContractPathsPer(conf, dir).forEach(p => {
            const json = utils_1.getJsonFile(p);
            const fileName = path_1.basename(p, '.json');
            const file = fillTemplate(fileName, {
                contractName: json.contractName,
                abi: json.compilerOutput.abi,
                evm: json.compilerOutput.evm,
                metadata: json.compilerOutput.metadata,
            });
            write(path_1.join(conf.contractAbstractionDir, 'truffle', dir), fileName, file);
        });
    });
}
exports.compileAll = compileAll;
/**
 * Create a truffle contract abstraction file
 *
 * @param contractName The name of the contract that will be exported
 * @param contractArgs The arguments to pass to @truffle/contract
 */
function fillTemplate(contractName, contractArgs) {
    return `'use strict'
Object.defineProperty(exports, '__esModule', { value: true })
const contract = require('@truffle/contract')
const ${contractName} = contract(${JSON.stringify(contractArgs, null, 1)})

if (process.env.NODE_ENV === 'test') {
  try {
    eval('${contractName}.setProvider(web3.currentProvider)')
  } catch (e) {}
}

exports.${contractName} = ${contractName}
`;
}
function getContractPathsPer({ artifactsDir }, version) {
    return [...shelljs_1.ls(path_1.join(artifactsDir, version, '/**/*.json'))];
}
function write(outPath, fileName, file) {
    shelljs_1.mkdir('-p', outPath);
    fs_1.writeFileSync(path_1.join(outPath, `${fileName}.js`), file);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1ZmZsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9jb21waWxlcnMvdHJ1ZmZsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJCQUFrQztBQUNsQywrQkFBcUM7QUFDckMscUNBQW1DO0FBRW5DLG9DQUF1RDtBQUV2RDs7Ozs7R0FLRztBQUNJLEtBQUssVUFBVSxVQUFVLENBQUMsSUFBZ0I7SUFDL0MsdUJBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUU7UUFDeEMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN6QyxNQUFNLElBQUksR0FBUSxtQkFBVyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ2hDLE1BQU0sUUFBUSxHQUFHLGVBQVEsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFDckMsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRTtnQkFDbEMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO2dCQUMvQixHQUFHLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHO2dCQUM1QixHQUFHLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHO2dCQUM1QixRQUFRLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRO2FBQ3ZDLENBQUMsQ0FBQTtZQUVGLEtBQUssQ0FBQyxXQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDMUUsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFmRCxnQ0FlQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBUyxZQUFZLENBQ25CLFlBQW9CLEVBQ3BCLFlBQTRCO0lBRTVCLE9BQU87OztRQUdELFlBQVksZUFBZSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDOzs7O1lBSTVELFlBQVk7Ozs7VUFJZCxZQUFZLE1BQU0sWUFBWTtDQUN2QyxDQUFBO0FBQ0QsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUMsRUFBRSxZQUFZLEVBQWMsRUFBRSxPQUFlO0lBQ3hFLE9BQU8sQ0FBQyxHQUFHLFlBQUUsQ0FBQyxXQUFJLENBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDM0QsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLE9BQWUsRUFBRSxRQUFnQixFQUFFLElBQVk7SUFDNUQsZUFBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNwQixrQkFBYSxDQUFDLFdBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxRQUFRLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQ3RELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cmFjdE9iamVjdCB9IGZyb20gJ0B0cnVmZmxlL2NvbnRyYWN0LXNjaGVtYSdcbmltcG9ydCB7IHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcydcbmltcG9ydCB7IGJhc2VuYW1lLCBqb2luIH0gZnJvbSAncGF0aCdcbmltcG9ydCB7IGxzLCBta2RpciB9IGZyb20gJ3NoZWxsanMnXG5pbXBvcnQgKiBhcyBjb25maWcgZnJvbSAnLi4vY29uZmlnJ1xuaW1wb3J0IHsgZ2V0QXJ0aWZhY3REaXJzLCBnZXRKc29uRmlsZSB9IGZyb20gJy4uL3V0aWxzJ1xuXG4vKipcbiAqIEdlbmVyYXRlIEB0cnVmZmxlL2NvbnRyYWN0IGFic3RyYWN0aW9ucyBmb3IgYWxsIG9mIHRoZSBzb2xpZGl0eSB2ZXJzaW9ucyB1bmRlciBhIHNwZWNpZmllZCBjb250cmFjdFxuICogZGlyZWN0b3J5LlxuICpcbiAqIEBwYXJhbSBjb25mIFRoZSBhcHBsaWNhdGlvbiBjb25maWd1cmF0aW9uLCBlLmcuIHdoZXJlIHRvIHJlYWQgYXJ0aWZhY3RzLCB3aGVyZSB0byBvdXRwdXQsIGV0Yy4uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21waWxlQWxsKGNvbmY6IGNvbmZpZy5BcHApIHtcbiAgZ2V0QXJ0aWZhY3REaXJzKGNvbmYpLmZvckVhY2goKHsgZGlyIH0pID0+IHtcbiAgICBnZXRDb250cmFjdFBhdGhzUGVyKGNvbmYsIGRpcikuZm9yRWFjaChwID0+IHtcbiAgICAgIGNvbnN0IGpzb246IGFueSA9IGdldEpzb25GaWxlKHApXG4gICAgICBjb25zdCBmaWxlTmFtZSA9IGJhc2VuYW1lKHAsICcuanNvbicpXG4gICAgICBjb25zdCBmaWxlID0gZmlsbFRlbXBsYXRlKGZpbGVOYW1lLCB7XG4gICAgICAgIGNvbnRyYWN0TmFtZToganNvbi5jb250cmFjdE5hbWUsXG4gICAgICAgIGFiaToganNvbi5jb21waWxlck91dHB1dC5hYmksXG4gICAgICAgIGV2bToganNvbi5jb21waWxlck91dHB1dC5ldm0sXG4gICAgICAgIG1ldGFkYXRhOiBqc29uLmNvbXBpbGVyT3V0cHV0Lm1ldGFkYXRhLFxuICAgICAgfSlcblxuICAgICAgd3JpdGUoam9pbihjb25mLmNvbnRyYWN0QWJzdHJhY3Rpb25EaXIsICd0cnVmZmxlJywgZGlyKSwgZmlsZU5hbWUsIGZpbGUpXG4gICAgfSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSB0cnVmZmxlIGNvbnRyYWN0IGFic3RyYWN0aW9uIGZpbGVcbiAqXG4gKiBAcGFyYW0gY29udHJhY3ROYW1lIFRoZSBuYW1lIG9mIHRoZSBjb250cmFjdCB0aGF0IHdpbGwgYmUgZXhwb3J0ZWRcbiAqIEBwYXJhbSBjb250cmFjdEFyZ3MgVGhlIGFyZ3VtZW50cyB0byBwYXNzIHRvIEB0cnVmZmxlL2NvbnRyYWN0XG4gKi9cbmZ1bmN0aW9uIGZpbGxUZW1wbGF0ZShcbiAgY29udHJhY3ROYW1lOiBzdHJpbmcsXG4gIGNvbnRyYWN0QXJnczogQ29udHJhY3RPYmplY3QsXG4pOiBzdHJpbmcge1xuICByZXR1cm4gYCd1c2Ugc3RyaWN0J1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KVxuY29uc3QgY29udHJhY3QgPSByZXF1aXJlKCdAdHJ1ZmZsZS9jb250cmFjdCcpXG5jb25zdCAke2NvbnRyYWN0TmFtZX0gPSBjb250cmFjdCgke0pTT04uc3RyaW5naWZ5KGNvbnRyYWN0QXJncywgbnVsbCwgMSl9KVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICB0cnkge1xuICAgIGV2YWwoJyR7Y29udHJhY3ROYW1lfS5zZXRQcm92aWRlcih3ZWIzLmN1cnJlbnRQcm92aWRlciknKVxuICB9IGNhdGNoIChlKSB7fVxufVxuXG5leHBvcnRzLiR7Y29udHJhY3ROYW1lfSA9ICR7Y29udHJhY3ROYW1lfVxuYFxufVxuXG5mdW5jdGlvbiBnZXRDb250cmFjdFBhdGhzUGVyKHsgYXJ0aWZhY3RzRGlyIH06IGNvbmZpZy5BcHAsIHZlcnNpb246IHN0cmluZykge1xuICByZXR1cm4gWy4uLmxzKGpvaW4oYXJ0aWZhY3RzRGlyLCB2ZXJzaW9uLCAnLyoqLyouanNvbicpKV1cbn1cblxuZnVuY3Rpb24gd3JpdGUob3V0UGF0aDogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nLCBmaWxlOiBzdHJpbmcpIHtcbiAgbWtkaXIoJy1wJywgb3V0UGF0aClcbiAgd3JpdGVGaWxlU3luYyhqb2luKG91dFBhdGgsIGAke2ZpbGVOYW1lfS5qc2ApLCBmaWxlKVxufVxuIl19