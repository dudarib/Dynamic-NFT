"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shelljs_1 = require("shelljs");
const utils_1 = require("./utils");
/**
 * Load a validated configuration file in JSON format for app configuration purposes.
 *
 * @param path The path relative to the current working directory to load the configuration file from.
 */
function load(path) {
    let json;
    try {
        json = utils_1.getJsonFile(path);
    }
    catch (e) {
        throw Error(`Could not load config at "${path}".\n\n${e}`);
    }
    assertAppConfig(json);
    return json;
}
exports.load = load;
function assertAppConfig(json) {
    function assertStr(val, prop) {
        if (typeof val !== 'string') {
            throw Error(`Expected value of config.${prop} to be a string\nGot: ${val}`);
        }
    }
    function assertDir(val, prop) {
        assertStr(val, prop);
        if (!shelljs_1.test('-d', val)) {
            throw Error(`Expected value of config.${prop} to be a directory\nGot: ${val}`);
        }
    }
    function assertBool(val, prop) {
        if (typeof val !== 'boolean') {
            throw Error(`Expected value of config.${prop} to be a boolean\nGot: ${val}`);
        }
    }
    function assertCompilerSettings(val) {
        if (!val || typeof val !== 'object') {
            throw Error(`Expected value of config.compilerSettings to be an object\nGot:${val}`);
        }
        const compilerSettings = val;
        if (!compilerSettings.versions ||
            typeof compilerSettings.versions !== 'object') {
            throw Error(`Expected value of config.compilerSettings.versions to be a dictionary\nGot:${JSON.stringify(compilerSettings.versions)}`);
        }
    }
    const appConfig = json;
    assertDir(appConfig.contractsDir, 'contractsDir');
    assertStr(appConfig.artifactsDir, 'artifactsDir');
    assertStr(appConfig.contractAbstractionDir, 'contractAbstractionDir');
    assertBool(appConfig.useDockerisedSolc, 'useDockerisedSolc');
    assertCompilerSettings(appConfig.compilerSettings);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBcUM7QUFzRXJDOzs7O0dBSUc7QUFDSCxTQUFnQixJQUFJLENBQUMsSUFBWTtJQUMvQixJQUFJLElBQWEsQ0FBQTtJQUNqQixJQUFJO1FBQ0YsSUFBSSxHQUFHLG1CQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDekI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE1BQU0sS0FBSyxDQUFDLDZCQUE2QixJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUMzRDtJQUNELGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUVyQixPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFWRCxvQkFVQztBQUVELFNBQVMsZUFBZSxDQUFDLElBQWE7SUFDcEMsU0FBUyxTQUFTLENBQUMsR0FBWSxFQUFFLElBQVk7UUFDM0MsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDM0IsTUFBTSxLQUFLLENBQ1QsNEJBQTRCLElBQUkseUJBQXlCLEdBQUcsRUFBRSxDQUMvRCxDQUFBO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsU0FBUyxTQUFTLENBQUMsR0FBWSxFQUFFLElBQVk7UUFDM0MsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNwQixJQUFJLENBQUMsY0FBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRTtZQUNwQixNQUFNLEtBQUssQ0FDVCw0QkFBNEIsSUFBSSw0QkFBNEIsR0FBRyxFQUFFLENBQ2xFLENBQUE7U0FDRjtJQUNILENBQUM7SUFFRCxTQUFTLFVBQVUsQ0FBQyxHQUFZLEVBQUUsSUFBWTtRQUM1QyxJQUFJLE9BQU8sR0FBRyxLQUFLLFNBQVMsRUFBRTtZQUM1QixNQUFNLEtBQUssQ0FDVCw0QkFBNEIsSUFBSSwwQkFBMEIsR0FBRyxFQUFFLENBQ2hFLENBQUE7U0FDRjtJQUNILENBQUM7SUFFRCxTQUFTLHNCQUFzQixDQUM3QixHQUFZO1FBRVosSUFBSSxDQUFDLEdBQUcsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDbkMsTUFBTSxLQUFLLENBQ1Qsa0VBQWtFLEdBQUcsRUFBRSxDQUN4RSxDQUFBO1NBQ0Y7UUFFRCxNQUFNLGdCQUFnQixHQUFHLEdBQTJDLENBQUE7UUFDcEUsSUFDRSxDQUFDLGdCQUFnQixDQUFDLFFBQVE7WUFDMUIsT0FBTyxnQkFBZ0IsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUM3QztZQUNBLE1BQU0sS0FBSyxDQUNULDhFQUE4RSxJQUFJLENBQUMsU0FBUyxDQUMxRixnQkFBZ0IsQ0FBQyxRQUFRLENBQzFCLEVBQUUsQ0FDSixDQUFBO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBd0IsQ0FBQTtJQUMxQyxTQUFTLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQTtJQUNqRCxTQUFTLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQTtJQUNqRCxTQUFTLENBQUMsU0FBUyxDQUFDLHNCQUFzQixFQUFFLHdCQUF3QixDQUFDLENBQUE7SUFDckUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO0lBQzVELHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3BELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0ZXN0IH0gZnJvbSAnc2hlbGxqcydcbmltcG9ydCB7IGdldEpzb25GaWxlIH0gZnJvbSAnLi91dGlscydcblxuLyoqXG4gKiBSdWRpbWVudGFyeSB0eXBlIGhlbHBlciB0byByZWN1cnNpdmVseSBtYXJrIHN0cmluZyB8IGJvb2xlYW4gdmFsdWVzIGFzIHVua25vd24uXG4gKlxuICogTWFkZSBzcGVjaWZpY2FsbHkgZm9yIHZhbGlkYXRpb24gb2YgQXBwQ29uZmlnXG4gKi9cbnR5cGUgRGVlcFVua25vd248VD4gPSB7XG4gIFtLIGluIGtleW9mIFRdOiBUW0tdIGV4dGVuZHMgc3RyaW5nIHwgYm9vbGVhbiA/IHVua25vd24gOiBEZWVwVW5rbm93bjxUW0tdPlxufVxuXG4vKipcbiAqIFN0cnVjdHVyZSBvZiB0aGUgYXBwbGljYXRpb24gY29uZmlndXJhdGlvbiwgcGF0aHMgYXJlIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LlxuICpcbiAqIFVzZXMgdGhlc2UgY29uZmlndXJhdGlvbiB2YWx1ZXMgZm9yOlxuICogLSBzb2wtY29tcGlsZXJcbiAqIC0gY29kZWdlbm5pbmcgZXRoZXJzIGNvbnRyYWN0IGFic3RyYWN0aW9uc1xuICogLSBjb2RlZ2VubmluZyB0cnVmZmxlIGNvbnRyYWN0IGFic3RyYWN0aW9uc1xuICogLSBydW5uaW5nIHNvbGhpbnRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcHAge1xuICAvKipcbiAgICogVGhlIGRpcmVjdG9yeSB3aGVyZSBhbGwgb2YgdGhlIHNvbGlkaXR5IHNtYXJ0IGNvbnRyYWN0cyBhcmUgaGVsZFxuICAgKi9cbiAgY29udHJhY3RzRGlyOiBzdHJpbmdcbiAgLyoqXG4gICAqIFRoZSBkaXJlY3Rvcnkgd2hlcmUgYWxsIG9mIHRoZSBzbWFydCBjb250cmFjdCBhcnRpZmFjdHMgc2hvdWxkIGJlIG91dHB1dHRlZFxuICAgKi9cbiAgYXJ0aWZhY3RzRGlyOiBzdHJpbmdcbiAgLyoqXG4gICAqIFRoZSBkaXJlY3Rvcnkgd2hlcmUgYWxsIGNvbnRyYWN0IGFic3RyYWN0aW9ucyBzaG91bGQgYmUgb3V0cHV0dGVkXG4gICAqL1xuICBjb250cmFjdEFic3RyYWN0aW9uRGlyOiBzdHJpbmdcbiAgLyoqXG4gICAqIEluc3RydWN0IHNvbC1jb21waWxlciB0byB1c2UgYSBkb2NrZXJpemVkIHNvbGMgaW5zdGFuY2UgZm9yIGhpZ2hlciBwZXJmb3JtYW5jZSxcbiAgICogb3IgdG8gdXNlIHNvbGNqc1xuICAgKi9cbiAgdXNlRG9ja2VyaXNlZFNvbGM6IGJvb2xlYW5cbiAgLyoqXG4gICAqIFZhcmlvdXMgY29tcGlsZXIgc2V0dGluZ3MgZm9yIHNvbC1jb21waWxlclxuICAgKi9cbiAgY29tcGlsZXJTZXR0aW5nczoge1xuICAgIC8qKlxuICAgICAqIEEgbWFwcGluZyBvZiBkaXJlY3RvcmllcyB0byB0aGVpciBzb2xpZGl0eSBjb21waWxlciB2ZXJzaW9ucyB0aGF0IHNob3VsZCBiZSB1c2VkLlxuICAgICAqXG4gICAgICogZS5nLlxuICAgICAqICBHaXZlbiB0aGUgZm9sbG93aW5nIGRpcmVjdG9yeSBzdHJ1Y3R1cmU6XG4gICAgICogYGBgc2hcbiAgICAgKiAgc3JjXG4gICAgICogIOKUnOKUgOKUgCB2MC40XG4gICAgICogIOKUlOKUgOKUgCB2MC41XG4gICAgICogIGBgYFxuICAgICAqIE91ciB2ZXJzaW9ucyBkaWN0IHdvdWxkIGxvb2sgbGlrZSB0aGUgZm9sbG93aW5nOlxuICAgICAqIGBgYGpzb25cbiAgICAgKiB7XG4gICAgICogIFwidjAuNFwiOiBcIjAuNC4yNFwiLFxuICAgICAqICBcInYwLjVcIjogXCIwLjUuMFwiXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHZlcnNpb25zOiB7XG4gICAgICBbZGlyOiBzdHJpbmddOiBzdHJpbmdcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFZlcnNpb25zIHRvIHB1YmxpY2FsbHkgc2hvdyBpbiBvdXIgdHJ1ZmZsZSBib3ggb3B0aW9uc1xuICAgKi9cbiAgcHVibGljVmVyc2lvbnM6IHN0cmluZ1tdXG59XG5cbi8qKlxuICogTG9hZCBhIHZhbGlkYXRlZCBjb25maWd1cmF0aW9uIGZpbGUgaW4gSlNPTiBmb3JtYXQgZm9yIGFwcCBjb25maWd1cmF0aW9uIHB1cnBvc2VzLlxuICpcbiAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IHRvIGxvYWQgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZSBmcm9tLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZChwYXRoOiBzdHJpbmcpOiBBcHAge1xuICBsZXQganNvbjogdW5rbm93blxuICB0cnkge1xuICAgIGpzb24gPSBnZXRKc29uRmlsZShwYXRoKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgRXJyb3IoYENvdWxkIG5vdCBsb2FkIGNvbmZpZyBhdCBcIiR7cGF0aH1cIi5cXG5cXG4ke2V9YClcbiAgfVxuICBhc3NlcnRBcHBDb25maWcoanNvbilcblxuICByZXR1cm4ganNvblxufVxuXG5mdW5jdGlvbiBhc3NlcnRBcHBDb25maWcoanNvbjogdW5rbm93bik6IGFzc2VydHMganNvbiBpcyBBcHAge1xuICBmdW5jdGlvbiBhc3NlcnRTdHIodmFsOiB1bmtub3duLCBwcm9wOiBzdHJpbmcpOiBhc3NlcnRzIHZhbCBpcyBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBFeHBlY3RlZCB2YWx1ZSBvZiBjb25maWcuJHtwcm9wfSB0byBiZSBhIHN0cmluZ1xcbkdvdDogJHt2YWx9YCxcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnREaXIodmFsOiB1bmtub3duLCBwcm9wOiBzdHJpbmcpOiBhc3NlcnRzIHZhbCBpcyBzdHJpbmcge1xuICAgIGFzc2VydFN0cih2YWwsIHByb3ApXG4gICAgaWYgKCF0ZXN0KCctZCcsIHZhbCkpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgRXhwZWN0ZWQgdmFsdWUgb2YgY29uZmlnLiR7cHJvcH0gdG8gYmUgYSBkaXJlY3RvcnlcXG5Hb3Q6ICR7dmFsfWAsXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Qm9vbCh2YWw6IHVua25vd24sIHByb3A6IHN0cmluZyk6IGFzc2VydHMgdmFsIGlzIGJvb2xlYW4ge1xuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgRXhwZWN0ZWQgdmFsdWUgb2YgY29uZmlnLiR7cHJvcH0gdG8gYmUgYSBib29sZWFuXFxuR290OiAke3ZhbH1gLFxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydENvbXBpbGVyU2V0dGluZ3MoXG4gICAgdmFsOiB1bmtub3duLFxuICApOiBhc3NlcnRzIHZhbCBpcyBBcHBbJ2NvbXBpbGVyU2V0dGluZ3MnXSB7XG4gICAgaWYgKCF2YWwgfHwgdHlwZW9mIHZhbCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgRXhwZWN0ZWQgdmFsdWUgb2YgY29uZmlnLmNvbXBpbGVyU2V0dGluZ3MgdG8gYmUgYW4gb2JqZWN0XFxuR290OiR7dmFsfWAsXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgY29tcGlsZXJTZXR0aW5ncyA9IHZhbCBhcyBEZWVwVW5rbm93bjxBcHBbJ2NvbXBpbGVyU2V0dGluZ3MnXT5cbiAgICBpZiAoXG4gICAgICAhY29tcGlsZXJTZXR0aW5ncy52ZXJzaW9ucyB8fFxuICAgICAgdHlwZW9mIGNvbXBpbGVyU2V0dGluZ3MudmVyc2lvbnMgIT09ICdvYmplY3QnXG4gICAgKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIHZhbHVlIG9mIGNvbmZpZy5jb21waWxlclNldHRpbmdzLnZlcnNpb25zIHRvIGJlIGEgZGljdGlvbmFyeVxcbkdvdDoke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIGNvbXBpbGVyU2V0dGluZ3MudmVyc2lvbnMsXG4gICAgICAgICl9YCxcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBjb25zdCBhcHBDb25maWcgPSBqc29uIGFzIERlZXBVbmtub3duPEFwcD5cbiAgYXNzZXJ0RGlyKGFwcENvbmZpZy5jb250cmFjdHNEaXIsICdjb250cmFjdHNEaXInKVxuICBhc3NlcnRTdHIoYXBwQ29uZmlnLmFydGlmYWN0c0RpciwgJ2FydGlmYWN0c0RpcicpXG4gIGFzc2VydFN0cihhcHBDb25maWcuY29udHJhY3RBYnN0cmFjdGlvbkRpciwgJ2NvbnRyYWN0QWJzdHJhY3Rpb25EaXInKVxuICBhc3NlcnRCb29sKGFwcENvbmZpZy51c2VEb2NrZXJpc2VkU29sYywgJ3VzZURvY2tlcmlzZWRTb2xjJylcbiAgYXNzZXJ0Q29tcGlsZXJTZXR0aW5ncyhhcHBDb25maWcuY29tcGlsZXJTZXR0aW5ncylcbn1cbiJdfQ==