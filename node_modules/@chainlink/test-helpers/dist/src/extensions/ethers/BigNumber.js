"use strict";
/**
 * @packageDocumentation
 *
 * An extension to ether's bignumber library that manually
 * polyfills any methods we need for tests by converting the
 * numbers back and forth between ethers.utils.BigNumber and
 * bn.js. If we end up having to replace a ton of methods in the
 * future this way, it might be worth creating a proxy object
 * that automatically does these method polyfills for us.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const BN = require("bn.js");
const BN_1 = new BN(-1);
// https://github.com/ethers-io/ethers.js/blob/v4.0.41/src.ts/utils/bignumber.ts#L42
function bnify(value) {
    const hex = value.toHexString();
    if (hex[0] === '-') {
        return new BN(hex.substring(3), 16).mul(BN_1);
    }
    return new BN(hex.substring(2), 16);
}
// https://github.com/ethers-io/ethers.js/blob/v4.0.41/src.ts/utils/bignumber.ts#L22
function toHex(bn) {
    const value = bn.toString(16);
    if (value[0] === '-') {
        if (value.length % 2 === 0) {
            return '-0x0' + value.substring(1);
        }
        return '-0x' + value.substring(1);
    }
    if (value.length % 2 === 1) {
        return '0x0' + value;
    }
    return '0x' + value;
}
// https://github.com/ethers-io/ethers.js/blob/v4.0.41/src.ts/utils/bignumber.ts#L38
function toBigNumber(bn) {
    return new ethers_1.ethers.utils.BigNumber(toHex(bn));
}
function extend(bignumber) {
    bignumber.prototype.isEven = function () {
        return bnify(this).isEven();
    };
    bignumber.prototype.umod = function (val) {
        return toBigNumber(bnify(this).umod(bnify(val)));
    };
    bignumber.prototype.shrn = function (val) {
        return toBigNumber(bnify(this).shrn(val));
    };
    bignumber.prototype.invm = function (val) {
        return toBigNumber(bnify(this).invm(bnify(val)));
    };
}
exports.extend = extend;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlnTnVtYmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2V4dGVuc2lvbnMvZXRoZXJzL0JpZ051bWJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7OztHQVNHOztBQUVILG1DQUErQjtBQUMvQiw0QkFBNEI7QUFnQjVCLE1BQU0sSUFBSSxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDdkIsb0ZBQW9GO0FBQ3BGLFNBQVMsS0FBSyxDQUFDLEtBQTZCO0lBQzFDLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUMvQixJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7UUFDbEIsT0FBTyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUM5QztJQUNELE9BQU8sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUNyQyxDQUFDO0FBRUQsb0ZBQW9GO0FBQ3BGLFNBQVMsS0FBSyxDQUFDLEVBQU07SUFDbkIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM3QixJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7UUFDcEIsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUIsT0FBTyxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNuQztRQUNELE9BQU8sS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDbEM7SUFDRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUMxQixPQUFPLEtBQUssR0FBRyxLQUFLLENBQUE7S0FDckI7SUFDRCxPQUFPLElBQUksR0FBRyxLQUFLLENBQUE7QUFDckIsQ0FBQztBQUVELG9GQUFvRjtBQUNwRixTQUFTLFdBQVcsQ0FBQyxFQUFNO0lBQ3pCLE9BQU8sSUFBSSxlQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUM5QyxDQUFDO0FBRUQsU0FBZ0IsTUFBTSxDQUFDLFNBQXdDO0lBQzdELFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHO1FBQzNCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQzdCLENBQUMsQ0FBQTtJQUVELFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVMsR0FBUTtRQUMxQyxPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDbEQsQ0FBQyxDQUFBO0lBRUQsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBUyxHQUFRO1FBQzFDLE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUMzQyxDQUFDLENBQUE7SUFFRCxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFTLEdBQVE7UUFDMUMsT0FBTyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2xELENBQUMsQ0FBQTtBQUNILENBQUM7QUFoQkQsd0JBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqXG4gKiBBbiBleHRlbnNpb24gdG8gZXRoZXIncyBiaWdudW1iZXIgbGlicmFyeSB0aGF0IG1hbnVhbGx5XG4gKiBwb2x5ZmlsbHMgYW55IG1ldGhvZHMgd2UgbmVlZCBmb3IgdGVzdHMgYnkgY29udmVydGluZyB0aGVcbiAqIG51bWJlcnMgYmFjayBhbmQgZm9ydGggYmV0d2VlbiBldGhlcnMudXRpbHMuQmlnTnVtYmVyIGFuZFxuICogYm4uanMuIElmIHdlIGVuZCB1cCBoYXZpbmcgdG8gcmVwbGFjZSBhIHRvbiBvZiBtZXRob2RzIGluIHRoZVxuICogZnV0dXJlIHRoaXMgd2F5LCBpdCBtaWdodCBiZSB3b3J0aCBjcmVhdGluZyBhIHByb3h5IG9iamVjdFxuICogdGhhdCBhdXRvbWF0aWNhbGx5IGRvZXMgdGhlc2UgbWV0aG9kIHBvbHlmaWxscyBmb3IgdXMuXG4gKi9cblxuaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IEJOID0gcmVxdWlyZSgnYm4uanMnKVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlICovXG5kZWNsYXJlIG1vZHVsZSAnZXRoZXJzJyB7XG4gIG5hbWVzcGFjZSBldGhlcnMge1xuICAgIG5hbWVzcGFjZSB1dGlscyB7XG4gICAgICBpbnRlcmZhY2UgQmlnTnVtYmVyIHtcbiAgICAgICAgaXNFdmVuKCk6IGJvb2xlYW5cbiAgICAgICAgdW1vZCh2YWw6IGV0aGVycy51dGlscy5CaWdOdW1iZXIpOiBldGhlcnMudXRpbHMuQmlnTnVtYmVyXG4gICAgICAgIHNocm4odmFsOiBudW1iZXIpOiBldGhlcnMudXRpbHMuQmlnTnVtYmVyXG4gICAgICAgIGludm0odmFsOiBldGhlcnMudXRpbHMuQmlnTnVtYmVyKTogZXRoZXJzLnV0aWxzLkJpZ051bWJlclxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBCTl8xID0gbmV3IEJOKC0xKVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVycy1pby9ldGhlcnMuanMvYmxvYi92NC4wLjQxL3NyYy50cy91dGlscy9iaWdudW1iZXIudHMjTDQyXG5mdW5jdGlvbiBibmlmeSh2YWx1ZTogZXRoZXJzLnV0aWxzLkJpZ051bWJlcik6IEJOIHtcbiAgY29uc3QgaGV4ID0gdmFsdWUudG9IZXhTdHJpbmcoKVxuICBpZiAoaGV4WzBdID09PSAnLScpIHtcbiAgICByZXR1cm4gbmV3IEJOKGhleC5zdWJzdHJpbmcoMyksIDE2KS5tdWwoQk5fMSlcbiAgfVxuICByZXR1cm4gbmV3IEJOKGhleC5zdWJzdHJpbmcoMiksIDE2KVxufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJzLWlvL2V0aGVycy5qcy9ibG9iL3Y0LjAuNDEvc3JjLnRzL3V0aWxzL2JpZ251bWJlci50cyNMMjJcbmZ1bmN0aW9uIHRvSGV4KGJuOiBCTik6IHN0cmluZyB7XG4gIGNvbnN0IHZhbHVlID0gYm4udG9TdHJpbmcoMTYpXG4gIGlmICh2YWx1ZVswXSA9PT0gJy0nKSB7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCAlIDIgPT09IDApIHtcbiAgICAgIHJldHVybiAnLTB4MCcgKyB2YWx1ZS5zdWJzdHJpbmcoMSlcbiAgICB9XG4gICAgcmV0dXJuICctMHgnICsgdmFsdWUuc3Vic3RyaW5nKDEpXG4gIH1cbiAgaWYgKHZhbHVlLmxlbmd0aCAlIDIgPT09IDEpIHtcbiAgICByZXR1cm4gJzB4MCcgKyB2YWx1ZVxuICB9XG4gIHJldHVybiAnMHgnICsgdmFsdWVcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVycy1pby9ldGhlcnMuanMvYmxvYi92NC4wLjQxL3NyYy50cy91dGlscy9iaWdudW1iZXIudHMjTDM4XG5mdW5jdGlvbiB0b0JpZ051bWJlcihibjogQk4pOiBldGhlcnMudXRpbHMuQmlnTnVtYmVyIHtcbiAgcmV0dXJuIG5ldyBldGhlcnMudXRpbHMuQmlnTnVtYmVyKHRvSGV4KGJuKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChiaWdudW1iZXI6IHR5cGVvZiBldGhlcnMudXRpbHMuQmlnTnVtYmVyKSB7XG4gIGJpZ251bWJlci5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJuaWZ5KHRoaXMpLmlzRXZlbigpXG4gIH1cblxuICBiaWdudW1iZXIucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbih2YWw6IGFueSkge1xuICAgIHJldHVybiB0b0JpZ051bWJlcihibmlmeSh0aGlzKS51bW9kKGJuaWZ5KHZhbCkpKVxuICB9XG5cbiAgYmlnbnVtYmVyLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24odmFsOiBhbnkpIHtcbiAgICByZXR1cm4gdG9CaWdOdW1iZXIoYm5pZnkodGhpcykuc2hybih2YWwpKVxuICB9XG5cbiAgYmlnbnVtYmVyLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24odmFsOiBhbnkpIHtcbiAgICByZXR1cm4gdG9CaWdOdW1iZXIoYm5pZnkodGhpcykuaW52bShibmlmeSh2YWwpKSlcbiAgfVxufVxuIl19