"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 *
 * This file contains functionality for ease of creating ethereum account abstractions
 * based on ethers.js. Useful for creating many accounts for testing purposes only.
 */
const ethers_1 = require("ethers");
const debug_1 = require("./debug");
/**
 * Create a pre-funded wallet with all defaults
 *
 * @param provider The provider to connect to the created wallet and to withdraw funds from
 * @param accountIndex The account index of the corresponding wallet derivation path
 */
async function createFundedWallet(provider, accountIndex) {
    const wallet = createWallet(provider, accountIndex);
    const receipt = await fundWallet(wallet, provider);
    return { wallet, receipt };
}
exports.createFundedWallet = createFundedWallet;
/**
 * Create an ethers.js wallet instance that is connected to the given provider
 *
 * @param provider A compatible ethers.js provider such as the one returned by `ganache.provider()` to connect the wallet to
 * @param accountIndex The account index to derive from the mnemonic phrase
 */
function createWallet(provider, accountIndex) {
    const debug = debug_1.makeDebug('wallet:createWallet');
    if (accountIndex < 0) {
        throw Error(`Account index must be greater than 0, got ${accountIndex}`);
    }
    /**
     * THIS IS FOR TESTING PURPOSES ONLY
     */
    const mnemonicPhrase = 'dose weasel clever culture letter volume endorse used harvest ripple circle install';
    const path = `m/44'/60'/${accountIndex}'/0/0`;
    debug('created wallet with parameters: %o', { mnemonicPhrase, path });
    return ethers_1.ethers.Wallet.fromMnemonic(mnemonicPhrase, path).connect(provider);
}
exports.createWallet = createWallet;
/**
 * Fund a wallet with unlocked accounts available from the given provider
 *
 * @param wallet The ethers wallet to fund
 * @param provider The provider which has control over unlocked, funded accounts to transfer funds from
 * @param overrides Transaction parameters to override when sending the funding transaction
 */
async function fundWallet(wallet, provider, overrides) {
    const debug = debug_1.makeDebug('wallet:fundWallet');
    debug('funding wallet');
    debug('retreiving accounts...');
    const nodeOwnedAccounts = await provider.listAccounts();
    debug('retreived accounts: %o', nodeOwnedAccounts);
    const signer = provider.getSigner(nodeOwnedAccounts[0]);
    const txParams = {
        to: wallet.address,
        value: ethers_1.ethers.utils.parseEther('10'),
        ...overrides,
    };
    debug('sending tx with the following parameters: %o', txParams);
    const tx = await signer.sendTransaction(txParams);
    debug('waiting on tx %s to complete...', tx.hash);
    const receipt = await tx.wait();
    debug('tx %s confirmed with tx receipt %o', tx.hash, receipt);
    return receipt;
}
exports.fundWallet = fundWallet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3dhbGxldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztHQUtHO0FBQ0gsbUNBQStCO0FBRS9CLG1DQUFtQztBQVluQzs7Ozs7R0FLRztBQUNJLEtBQUssVUFBVSxrQkFBa0IsQ0FDdEMsUUFBeUIsRUFDekIsWUFBb0I7SUFFcEIsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQTtJQUNuRCxNQUFNLE9BQU8sR0FBRyxNQUFNLFVBQVUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFFbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQTtBQUM1QixDQUFDO0FBUkQsZ0RBUUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLFlBQVksQ0FDMUIsUUFBMEMsRUFDMUMsWUFBb0I7SUFFcEIsTUFBTSxLQUFLLEdBQUcsaUJBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0lBQzlDLElBQUksWUFBWSxHQUFHLENBQUMsRUFBRTtRQUNwQixNQUFNLEtBQUssQ0FBQyw2Q0FBNkMsWUFBWSxFQUFFLENBQUMsQ0FBQTtLQUN6RTtJQUVEOztPQUVHO0lBQ0gsTUFBTSxjQUFjLEdBQ2xCLHFGQUFxRixDQUFBO0lBRXZGLE1BQU0sSUFBSSxHQUFHLGFBQWEsWUFBWSxPQUFPLENBQUE7SUFDN0MsS0FBSyxDQUFDLG9DQUFvQyxFQUFFLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFFckUsT0FBTyxlQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQzNFLENBQUM7QUFuQkQsb0NBbUJDO0FBRUQ7Ozs7OztHQU1HO0FBQ0ksS0FBSyxVQUFVLFVBQVUsQ0FDOUIsTUFBcUIsRUFDckIsUUFBMEMsRUFDMUMsU0FBb0U7SUFFcEUsTUFBTSxLQUFLLEdBQUcsaUJBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0lBQzVDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBRXZCLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0lBRS9CLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUE7SUFDdkQsS0FBSyxDQUFDLHdCQUF3QixFQUFFLGlCQUFpQixDQUFDLENBQUE7SUFFbEQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRXZELE1BQU0sUUFBUSxHQUF3QztRQUNwRCxFQUFFLEVBQUUsTUFBTSxDQUFDLE9BQU87UUFDbEIsS0FBSyxFQUFFLGVBQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztRQUNwQyxHQUFHLFNBQVM7S0FDYixDQUFBO0lBQ0QsS0FBSyxDQUFDLDhDQUE4QyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQy9ELE1BQU0sRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUVqRCxLQUFLLENBQUMsaUNBQWlDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2pELE1BQU0sT0FBTyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0lBQy9CLEtBQUssQ0FBQyxvQ0FBb0MsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQzdELE9BQU8sT0FBTyxDQUFBO0FBQ2hCLENBQUM7QUEzQkQsZ0NBMkJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgZnVuY3Rpb25hbGl0eSBmb3IgZWFzZSBvZiBjcmVhdGluZyBldGhlcmV1bSBhY2NvdW50IGFic3RyYWN0aW9uc1xuICogYmFzZWQgb24gZXRoZXJzLmpzLiBVc2VmdWwgZm9yIGNyZWF0aW5nIG1hbnkgYWNjb3VudHMgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cbiAqL1xuaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IHsgSnNvblJwY1Byb3ZpZGVyIH0gZnJvbSAnZXRoZXJzL3Byb3ZpZGVycydcbmltcG9ydCB7IG1ha2VEZWJ1ZyB9IGZyb20gJy4vZGVidWcnXG5cbmludGVyZmFjZSBSQ3JlYXRlRnVuZGVkV2FsbGV0IHtcbiAgLyoqXG4gICAqIFRoZSBjcmVhdGVkIHdhbGxldFxuICAgKi9cbiAgd2FsbGV0OiBldGhlcnMuV2FsbGV0XG4gIC8qKlxuICAgKiBUaGUgcmVjZWlwdCBvZiB0aGUgdHggdGhhdCBmdW5kZWQgdGhlIGNyZWF0ZWQgd2FsbGV0XG4gICAqL1xuICByZWNlaXB0OiBldGhlcnMucHJvdmlkZXJzLlRyYW5zYWN0aW9uUmVjZWlwdFxufVxuLyoqXG4gKiBDcmVhdGUgYSBwcmUtZnVuZGVkIHdhbGxldCB3aXRoIGFsbCBkZWZhdWx0c1xuICpcbiAqIEBwYXJhbSBwcm92aWRlciBUaGUgcHJvdmlkZXIgdG8gY29ubmVjdCB0byB0aGUgY3JlYXRlZCB3YWxsZXQgYW5kIHRvIHdpdGhkcmF3IGZ1bmRzIGZyb21cbiAqIEBwYXJhbSBhY2NvdW50SW5kZXggVGhlIGFjY291bnQgaW5kZXggb2YgdGhlIGNvcnJlc3BvbmRpbmcgd2FsbGV0IGRlcml2YXRpb24gcGF0aFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRnVuZGVkV2FsbGV0KFxuICBwcm92aWRlcjogSnNvblJwY1Byb3ZpZGVyLFxuICBhY2NvdW50SW5kZXg6IG51bWJlcixcbik6IFByb21pc2U8UkNyZWF0ZUZ1bmRlZFdhbGxldD4ge1xuICBjb25zdCB3YWxsZXQgPSBjcmVhdGVXYWxsZXQocHJvdmlkZXIsIGFjY291bnRJbmRleClcbiAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IGZ1bmRXYWxsZXQod2FsbGV0LCBwcm92aWRlcilcblxuICByZXR1cm4geyB3YWxsZXQsIHJlY2VpcHQgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBldGhlcnMuanMgd2FsbGV0IGluc3RhbmNlIHRoYXQgaXMgY29ubmVjdGVkIHRvIHRoZSBnaXZlbiBwcm92aWRlclxuICpcbiAqIEBwYXJhbSBwcm92aWRlciBBIGNvbXBhdGlibGUgZXRoZXJzLmpzIHByb3ZpZGVyIHN1Y2ggYXMgdGhlIG9uZSByZXR1cm5lZCBieSBgZ2FuYWNoZS5wcm92aWRlcigpYCB0byBjb25uZWN0IHRoZSB3YWxsZXQgdG9cbiAqIEBwYXJhbSBhY2NvdW50SW5kZXggVGhlIGFjY291bnQgaW5kZXggdG8gZGVyaXZlIGZyb20gdGhlIG1uZW1vbmljIHBocmFzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlV2FsbGV0KFxuICBwcm92aWRlcjogZXRoZXJzLnByb3ZpZGVycy5Kc29uUnBjUHJvdmlkZXIsXG4gIGFjY291bnRJbmRleDogbnVtYmVyLFxuKTogZXRoZXJzLldhbGxldCB7XG4gIGNvbnN0IGRlYnVnID0gbWFrZURlYnVnKCd3YWxsZXQ6Y3JlYXRlV2FsbGV0JylcbiAgaWYgKGFjY291bnRJbmRleCA8IDApIHtcbiAgICB0aHJvdyBFcnJvcihgQWNjb3VudCBpbmRleCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLCBnb3QgJHthY2NvdW50SW5kZXh9YClcbiAgfVxuXG4gIC8qKlxuICAgKiBUSElTIElTIEZPUiBURVNUSU5HIFBVUlBPU0VTIE9OTFlcbiAgICovXG4gIGNvbnN0IG1uZW1vbmljUGhyYXNlID1cbiAgICAnZG9zZSB3ZWFzZWwgY2xldmVyIGN1bHR1cmUgbGV0dGVyIHZvbHVtZSBlbmRvcnNlIHVzZWQgaGFydmVzdCByaXBwbGUgY2lyY2xlIGluc3RhbGwnXG5cbiAgY29uc3QgcGF0aCA9IGBtLzQ0Jy82MCcvJHthY2NvdW50SW5kZXh9Jy8wLzBgXG4gIGRlYnVnKCdjcmVhdGVkIHdhbGxldCB3aXRoIHBhcmFtZXRlcnM6ICVvJywgeyBtbmVtb25pY1BocmFzZSwgcGF0aCB9KVxuXG4gIHJldHVybiBldGhlcnMuV2FsbGV0LmZyb21NbmVtb25pYyhtbmVtb25pY1BocmFzZSwgcGF0aCkuY29ubmVjdChwcm92aWRlcilcbn1cblxuLyoqXG4gKiBGdW5kIGEgd2FsbGV0IHdpdGggdW5sb2NrZWQgYWNjb3VudHMgYXZhaWxhYmxlIGZyb20gdGhlIGdpdmVuIHByb3ZpZGVyXG4gKlxuICogQHBhcmFtIHdhbGxldCBUaGUgZXRoZXJzIHdhbGxldCB0byBmdW5kXG4gKiBAcGFyYW0gcHJvdmlkZXIgVGhlIHByb3ZpZGVyIHdoaWNoIGhhcyBjb250cm9sIG92ZXIgdW5sb2NrZWQsIGZ1bmRlZCBhY2NvdW50cyB0byB0cmFuc2ZlciBmdW5kcyBmcm9tXG4gKiBAcGFyYW0gb3ZlcnJpZGVzIFRyYW5zYWN0aW9uIHBhcmFtZXRlcnMgdG8gb3ZlcnJpZGUgd2hlbiBzZW5kaW5nIHRoZSBmdW5kaW5nIHRyYW5zYWN0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmdW5kV2FsbGV0KFxuICB3YWxsZXQ6IGV0aGVycy5XYWxsZXQsXG4gIHByb3ZpZGVyOiBldGhlcnMucHJvdmlkZXJzLkpzb25ScGNQcm92aWRlcixcbiAgb3ZlcnJpZGVzPzogT21pdDxldGhlcnMucHJvdmlkZXJzLlRyYW5zYWN0aW9uUmVxdWVzdCwgJ3RvJyB8ICdmcm9tJz4sXG4pOiBQcm9taXNlPGV0aGVycy5wcm92aWRlcnMuVHJhbnNhY3Rpb25SZWNlaXB0PiB7XG4gIGNvbnN0IGRlYnVnID0gbWFrZURlYnVnKCd3YWxsZXQ6ZnVuZFdhbGxldCcpXG4gIGRlYnVnKCdmdW5kaW5nIHdhbGxldCcpXG5cbiAgZGVidWcoJ3JldHJlaXZpbmcgYWNjb3VudHMuLi4nKVxuXG4gIGNvbnN0IG5vZGVPd25lZEFjY291bnRzID0gYXdhaXQgcHJvdmlkZXIubGlzdEFjY291bnRzKClcbiAgZGVidWcoJ3JldHJlaXZlZCBhY2NvdW50czogJW8nLCBub2RlT3duZWRBY2NvdW50cylcblxuICBjb25zdCBzaWduZXIgPSBwcm92aWRlci5nZXRTaWduZXIobm9kZU93bmVkQWNjb3VudHNbMF0pXG5cbiAgY29uc3QgdHhQYXJhbXM6IGV0aGVycy5wcm92aWRlcnMuVHJhbnNhY3Rpb25SZXF1ZXN0ID0ge1xuICAgIHRvOiB3YWxsZXQuYWRkcmVzcyxcbiAgICB2YWx1ZTogZXRoZXJzLnV0aWxzLnBhcnNlRXRoZXIoJzEwJyksXG4gICAgLi4ub3ZlcnJpZGVzLFxuICB9XG4gIGRlYnVnKCdzZW5kaW5nIHR4IHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOiAlbycsIHR4UGFyYW1zKVxuICBjb25zdCB0eCA9IGF3YWl0IHNpZ25lci5zZW5kVHJhbnNhY3Rpb24odHhQYXJhbXMpXG5cbiAgZGVidWcoJ3dhaXRpbmcgb24gdHggJXMgdG8gY29tcGxldGUuLi4nLCB0eC5oYXNoKVxuICBjb25zdCByZWNlaXB0ID0gYXdhaXQgdHgud2FpdCgpXG4gIGRlYnVnKCd0eCAlcyBjb25maXJtZWQgd2l0aCB0eCByZWNlaXB0ICVvJywgdHguaGFzaCwgcmVjZWlwdClcbiAgcmV0dXJuIHJlY2VpcHRcbn1cbiJdfQ==